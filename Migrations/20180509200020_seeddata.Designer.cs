// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Publications;

namespace PublicationsTracker.Migrations
{
    [DbContext(typeof(PublicationsContext))]
    [Migration("20180509200020_seeddata")]
    partial class seeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029");

            modelBuilder.Entity("Publications.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<int>("MagazineId");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Title");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MagazineId");

                    b.ToTable("Articles");

                    b.HasData(
                        new { ArticleId = 1, AuthorId = 1, MagazineId = 1, PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "EF Core 2.1 Query Types" },
                        new { ArticleId = 2, AuthorId = 1, MagazineId = 1, PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Creating Azure Functions That Can Read from Cosmos DB with Almost No Code" },
                        new { ArticleId = 3, AuthorId = 2, MagazineId = 1, PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Reddit and the Struggle to Detoxify the Internet" }
                    );
                });

            modelBuilder.Entity("Publications.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasColumnName("AuthorName");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new { AuthorId = 1, Name = "Julie Lerman" },
                        new { AuthorId = 2, Name = "Andrew Marantz" }
                    );
                });

            modelBuilder.Entity("Publications.Magazine", b =>
                {
                    b.Property<int>("MagazineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Publisher");

                    b.HasKey("MagazineId");

                    b.ToTable("Magazines");

                    b.HasData(
                        new { MagazineId = 1, Name = "MSDN Magazine" },
                        new { MagazineId = 2, Name = "New Yorker" }
                    );
                });

            modelBuilder.Entity("Publications.Article", b =>
                {
                    b.HasOne("Publications.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Publications.Magazine")
                        .WithMany("Articles")
                        .HasForeignKey("MagazineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
